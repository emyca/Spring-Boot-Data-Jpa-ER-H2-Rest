
REST API Student-Course
------------------------

В Web-браузері запускаємо H2 Database Engine
http://localhost:8080/h2-console
Конектимося до БД.

Postman для тесту REST API
https://www.postman.com/

Для передачі тіла запиту,
налаштування в Postman: Body > raw > JSON.


(1) Отримання всіх Student даних.
Дані не існують взагалі.

GET
http://localhost:8080/api/v1/students


(2) Отримання Student за id.
Дані не існують взагалі.

GET
http://localhost:8080/api/v1/students/1


(3) Отримання всіх Course даних.
Дані не існують взагалі.

GET
http://localhost:8080/api/v1/courses


(4) Отримання Course за id.
Дані не існують взагалі.

GET
http://localhost:8080/api/v1/courses/1


(5) Отримання всіх Course даних за
неіснуючим Student id, оскільки Student
дані не існують взагалі.

GET
http://localhost:8080/api/v1/students/1/courses


(6) Отримання всіх Student даних за
неіснуючим Course id, оскільки Course
дані не існують взагалі.

GET
http://localhost:8080/api/v1/courses/1/students


(7) Створення даних Student.

POST
http://localhost:8080/api/v1/students

Прописуємо при кожному запиті окремо.


{
	"firstName": "Alice",
	"lastName": "Sunny",
	"email": "alice@mail.com"
}


{
	"firstName": "Bob",
	"lastName": "Green",
	"email": "bob@mail.com"
}


{
	"firstName": "Lucy",
	"lastName": "Moon",
	"email": "moon@mail.com"
}

{
	"firstName": "Tom",
	"lastName": "Clark",
	"email": "tom@mail.com"
}

Перевіремо створення Student об'єктів

GET
http://localhost:8080/api/v1/students


(8) Створення даних Course.

POST
http://localhost:8080/api/v1/courses

Прописуємо при кожному запиті окремо.

{
	"name": "Alpha"
}


{
	"name": "Beta"
}


{
	"name": "Gamma"
}

Перевіремо створення Course об'єктів

GET
http://localhost:8080/api/v1/courses


(9) Закріплення Course за Student id.
Course id в тілі запиту.

POST
http://localhost:8080/api/v1/students/1/courses

{
	"id": 1
}


POST
http://localhost:8080/api/v1/students/1/courses

{
	"id": 2
}


POST
http://localhost:8080/api/v1/students/2/courses

{
	"id": 2
}


POST
http://localhost:8080/api/v1/students/2/courses

{
	"id": 3
}

POST
http://localhost:8080/api/v1/students/4/courses

{
	"id": 2
}


Також, спробуємо за неіснуючим Student id.


(10) Повторимо маніпуляції в пп 1-6 (включаючи з невірними id).
Дані вже існують.


(11) Оновлення Student за id.

PUT
http://localhost:8080/api/v1/students/1

{
	"firstName": "Alice",
	"lastName": "Terra",
	"email": "terra@mail.com"
}

PUT
http://localhost:8080/api/v1/students/2

{
	"firstName": "Bob",
	"lastName": "Green",
	"email": "b.green@mail.com"
}

Перевіремо оновлення Student об'єктів
GET
http://localhost:8080/api/v1/students


(12) Оновлення Course за id.

PUT
http://localhost:8080/api/v1/courses/1

{
	"name": "Alpha +"
}

PUT
http://localhost:8080/api/v1/courses/3

{
	"name": "Gamma +"
}

Перевіремо оновлення Course об'єктів
GET
http://localhost:8080/api/v1/courses


(13) Відкріплення Course за id та Student id.

DELETE
http://localhost:8080/api/v1/students/1/courses/1

DELETE
http://localhost:8080/api/v1/students/4/courses/2

Перевіремо

GET
http://localhost:8080/api/v1/courses

GET
http://localhost:8080/api/v1/students


(14) Видалення Course за id.

DELETE
http://localhost:8080/api/v1/courses/2

Маємо отримати Referential integrity constraint violation,
оскільки Course за таким id має посилання на певного(их) Student.
Треба спершу відкрипіти цей курс від цього/цих Student.
(Див. п. 13).

Також, спробуємо за неіснуючими id.

Видалемо Course за id, який НЕ має посилання на певного Student.
DELETE
http://localhost:8080/api/v1/courses/1

Перевіремо
GET
http://localhost:8080/api/v1/courses


(15) Видалення Student за id.

DELETE
http://localhost:8080/api/v1/students/1

DELETE
http://localhost:8080/api/v1/students/4

Спробуємо видалити повторно.

Також, спробуємо за неіснуючими id.

Перевіремо
GET
http://localhost:8080/api/v1/students

